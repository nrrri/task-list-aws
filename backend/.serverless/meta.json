{
  "/Users/ferin/Desktop/task-list-aws/backend/serverless.yml": {
    "versionFramework": "4.14.3",
    "servicePath": "/Users/ferin/Desktop/task-list-aws/backend/serverless.yml",
    "serviceConfigFileName": "serverless.yml",
    "service": {
      "org": "ferin",
      "service": "task-list-app",
      "provider": {
        "name": "aws",
        "runtime": "nodejs22.x",
        "region": "ca-central-1",
        "iam": {
          "role": {
            "statements": [
              {
                "Effect": "Allow",
                "Action": [
                  "dynamodb:PutItem",
                  "dynamodb:GetItem",
                  "dynamodb:DeleteItem",
                  "dynamodb:Scan"
                ],
                "Resource": [
                  {
                    "Fn::GetAtt": [
                      "TasksTable",
                      "Arn"
                    ]
                  }
                ]
              }
            ]
          }
        },
        "stage": "dev",
        "versionFunctions": true,
        "compiledCloudFormationTemplate": {
          "AWSTemplateFormatVersion": "2010-09-09",
          "Description": "The AWS CloudFormation template for this Serverless application",
          "Resources": {
            "GetTasksLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/task-list-app-dev-getTasks"
              }
            },
            "CreateTaskLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/task-list-app-dev-createTask"
              }
            },
            "UpdateTaskByIdLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/task-list-app-dev-updateTaskById"
              }
            },
            "DeleteTaskByIdLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/task-list-app-dev-deleteTaskById"
              }
            },
            "IamRoleLambdaExecution": {
              "Type": "AWS::IAM::Role",
              "Properties": {
                "AssumeRolePolicyDocument": {
                  "Version": "2012-10-17",
                  "Statement": [
                    {
                      "Effect": "Allow",
                      "Principal": {
                        "Service": [
                          "lambda.amazonaws.com"
                        ]
                      },
                      "Action": [
                        "sts:AssumeRole"
                      ]
                    }
                  ]
                },
                "Policies": [
                  {
                    "PolicyName": {
                      "Fn::Join": [
                        "-",
                        [
                          "task-list-app",
                          "dev",
                          "lambda"
                        ]
                      ]
                    },
                    "PolicyDocument": {
                      "Version": "2012-10-17",
                      "Statement": [
                        {
                          "Effect": "Allow",
                          "Action": [
                            "logs:CreateLogStream",
                            "logs:CreateLogGroup",
                            "logs:TagResource"
                          ],
                          "Resource": [
                            {
                              "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/task-list-app-dev*:*"
                            }
                          ]
                        },
                        {
                          "Effect": "Allow",
                          "Action": [
                            "logs:PutLogEvents"
                          ],
                          "Resource": [
                            {
                              "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/task-list-app-dev*:*:*"
                            }
                          ]
                        },
                        {
                          "Effect": "Allow",
                          "Action": [
                            "dynamodb:PutItem",
                            "dynamodb:GetItem",
                            "dynamodb:DeleteItem",
                            "dynamodb:Scan"
                          ],
                          "Resource": [
                            {
                              "Fn::GetAtt": [
                                "TasksTable",
                                "Arn"
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  }
                ],
                "Path": "/",
                "RoleName": {
                  "Fn::Join": [
                    "-",
                    [
                      "task-list-app",
                      "dev",
                      {
                        "Ref": "AWS::Region"
                      },
                      "lambdaRole"
                    ]
                  ]
                }
              }
            },
            "GetTasksLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-ca-central-1-0a9780f3-7202",
                  "S3Key": "serverless/task-list-app/dev/1746902859993-2025-05-10T18:47:39.993Z/task-list-app.zip"
                },
                "Handler": "handlers/handler.getTasks",
                "Runtime": "nodejs22.x",
                "FunctionName": "task-list-app-dev-getTasks",
                "MemorySize": 1024,
                "Timeout": 6,
                "Description": "get all tasks from db",
                "Environment": {
                  "Variables": {
                    "NODE_OPTIONS": "--enable-source-maps"
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "GetTasksLogGroup"
              ]
            },
            "CreateTaskLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-ca-central-1-0a9780f3-7202",
                  "S3Key": "serverless/task-list-app/dev/1746902859993-2025-05-10T18:47:39.993Z/task-list-app.zip"
                },
                "Handler": "handlers/handler.createTask",
                "Runtime": "nodejs22.x",
                "FunctionName": "task-list-app-dev-createTask",
                "MemorySize": 1024,
                "Timeout": 6,
                "Description": "create a task into db",
                "Environment": {
                  "Variables": {
                    "NODE_OPTIONS": "--enable-source-maps"
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "CreateTaskLogGroup"
              ]
            },
            "UpdateTaskByIdLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-ca-central-1-0a9780f3-7202",
                  "S3Key": "serverless/task-list-app/dev/1746902859993-2025-05-10T18:47:39.993Z/task-list-app.zip"
                },
                "Handler": "handlers/handler.updateTaskById",
                "Runtime": "nodejs22.x",
                "FunctionName": "task-list-app-dev-updateTaskById",
                "MemorySize": 1024,
                "Timeout": 6,
                "Description": "update a task by id",
                "Environment": {
                  "Variables": {
                    "NODE_OPTIONS": "--enable-source-maps"
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "UpdateTaskByIdLogGroup"
              ]
            },
            "DeleteTaskByIdLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-ca-central-1-0a9780f3-7202",
                  "S3Key": "serverless/task-list-app/dev/1746902859993-2025-05-10T18:47:39.993Z/task-list-app.zip"
                },
                "Handler": "handlers/handler.deleteTaskById",
                "Runtime": "nodejs22.x",
                "FunctionName": "task-list-app-dev-deleteTaskById",
                "MemorySize": 1024,
                "Timeout": 6,
                "Description": "delete a task in db by id",
                "Environment": {
                  "Variables": {
                    "NODE_OPTIONS": "--enable-source-maps"
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "DeleteTaskByIdLogGroup"
              ]
            },
            "GetTasksLambdaVersionq82nft5HZoBlBjpylG2AYtqSacr4Slsz2SpjfwoszQ": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "GetTasksLambdaFunction"
                },
                "CodeSha256": "WyYy48fSO4hu9gfV4xYpj5QFRy0pyK7qAeuKP2SQmhE=",
                "Description": "get all tasks from db"
              }
            },
            "CreateTaskLambdaVersion7X4cXuRuicrteaoSPkW243t2ANW1NNENVgAb6TDzbzs": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "CreateTaskLambdaFunction"
                },
                "CodeSha256": "WyYy48fSO4hu9gfV4xYpj5QFRy0pyK7qAeuKP2SQmhE=",
                "Description": "create a task into db"
              }
            },
            "UpdateTaskByIdLambdaVersionXInGEBTB1M4hSfe7yRfVlPX2DZgNtfzPi3glRok": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "UpdateTaskByIdLambdaFunction"
                },
                "CodeSha256": "WyYy48fSO4hu9gfV4xYpj5QFRy0pyK7qAeuKP2SQmhE=",
                "Description": "update a task by id"
              }
            },
            "DeleteTaskByIdLambdaVersiondIxvDb08o65PqlpZsJJV50u4o5Z9nrBWX9zXKvkIY": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "DeleteTaskByIdLambdaFunction"
                },
                "CodeSha256": "WyYy48fSO4hu9gfV4xYpj5QFRy0pyK7qAeuKP2SQmhE=",
                "Description": "delete a task in db by id"
              }
            },
            "ApiGatewayRestApi": {
              "Type": "AWS::ApiGateway::RestApi",
              "Properties": {
                "Name": "dev-task-list-app",
                "EndpointConfiguration": {
                  "Types": [
                    "EDGE"
                  ]
                },
                "Policy": ""
              }
            },
            "ApiGatewayResourceTasks": {
              "Type": "AWS::ApiGateway::Resource",
              "Properties": {
                "ParentId": {
                  "Fn::GetAtt": [
                    "ApiGatewayRestApi",
                    "RootResourceId"
                  ]
                },
                "PathPart": "tasks",
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayResourceTasksTaskidVar": {
              "Type": "AWS::ApiGateway::Resource",
              "Properties": {
                "ParentId": {
                  "Ref": "ApiGatewayResourceTasks"
                },
                "PathPart": "{taskId}",
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayMethodTasksGet": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "HttpMethod": "GET",
                "RequestParameters": {},
                "ResourceId": {
                  "Ref": "ApiGatewayResourceTasks"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "ApiKeyRequired": "<REDACTED>",
                "AuthorizationType": "NONE",
                "Integration": {
                  "IntegrationHttpMethod": "POST",
                  "Type": "AWS_PROXY",
                  "Uri": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition"
                        },
                        ":apigateway:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":lambda:path/2015-03-31/functions/",
                        {
                          "Fn::GetAtt": [
                            "GetTasksLambdaFunction",
                            "Arn"
                          ]
                        },
                        "/invocations"
                      ]
                    ]
                  }
                },
                "MethodResponses": []
              },
              "DependsOn": [
                "GetTasksLambdaPermissionApiGateway"
              ]
            },
            "ApiGatewayMethodTasksPost": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "HttpMethod": "POST",
                "RequestParameters": {},
                "ResourceId": {
                  "Ref": "ApiGatewayResourceTasks"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "ApiKeyRequired": "<REDACTED>",
                "AuthorizationType": "NONE",
                "Integration": {
                  "IntegrationHttpMethod": "POST",
                  "Type": "AWS_PROXY",
                  "Uri": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition"
                        },
                        ":apigateway:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":lambda:path/2015-03-31/functions/",
                        {
                          "Fn::GetAtt": [
                            "CreateTaskLambdaFunction",
                            "Arn"
                          ]
                        },
                        "/invocations"
                      ]
                    ]
                  }
                },
                "MethodResponses": []
              },
              "DependsOn": [
                "CreateTaskLambdaPermissionApiGateway"
              ]
            },
            "ApiGatewayMethodTasksTaskidVarPut": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "HttpMethod": "PUT",
                "RequestParameters": {},
                "ResourceId": {
                  "Ref": "ApiGatewayResourceTasksTaskidVar"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "ApiKeyRequired": "<REDACTED>",
                "AuthorizationType": "NONE",
                "Integration": {
                  "IntegrationHttpMethod": "POST",
                  "Type": "AWS_PROXY",
                  "Uri": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition"
                        },
                        ":apigateway:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":lambda:path/2015-03-31/functions/",
                        {
                          "Fn::GetAtt": [
                            "UpdateTaskByIdLambdaFunction",
                            "Arn"
                          ]
                        },
                        "/invocations"
                      ]
                    ]
                  }
                },
                "MethodResponses": []
              },
              "DependsOn": [
                "UpdateTaskByIdLambdaPermissionApiGateway"
              ]
            },
            "ApiGatewayMethodTasksTaskidVarDelete": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "HttpMethod": "DELETE",
                "RequestParameters": {},
                "ResourceId": {
                  "Ref": "ApiGatewayResourceTasksTaskidVar"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "ApiKeyRequired": "<REDACTED>",
                "AuthorizationType": "NONE",
                "Integration": {
                  "IntegrationHttpMethod": "POST",
                  "Type": "AWS_PROXY",
                  "Uri": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition"
                        },
                        ":apigateway:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":lambda:path/2015-03-31/functions/",
                        {
                          "Fn::GetAtt": [
                            "DeleteTaskByIdLambdaFunction",
                            "Arn"
                          ]
                        },
                        "/invocations"
                      ]
                    ]
                  }
                },
                "MethodResponses": []
              },
              "DependsOn": [
                "DeleteTaskByIdLambdaPermissionApiGateway"
              ]
            },
            "ApiGatewayDeployment1746902854487": {
              "Type": "AWS::ApiGateway::Deployment",
              "Properties": {
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "StageName": "dev"
              },
              "DependsOn": [
                "ApiGatewayMethodTasksGet",
                "ApiGatewayMethodTasksPost",
                "ApiGatewayMethodTasksTaskidVarPut",
                "ApiGatewayMethodTasksTaskidVarDelete"
              ]
            },
            "GetTasksLambdaPermissionApiGateway": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "GetTasksLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "/*/*"
                    ]
                  ]
                }
              }
            },
            "CreateTaskLambdaPermissionApiGateway": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "CreateTaskLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "/*/*"
                    ]
                  ]
                }
              }
            },
            "UpdateTaskByIdLambdaPermissionApiGateway": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "UpdateTaskByIdLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "/*/*"
                    ]
                  ]
                }
              }
            },
            "DeleteTaskByIdLambdaPermissionApiGateway": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "DeleteTaskByIdLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "/*/*"
                    ]
                  ]
                }
              }
            },
            "TasksTable": {
              "Type": "AWS::DynamoDB::Table",
              "Properties": {
                "TableName": "TasksTable",
                "ProvisionedThroughput": {
                  "ReadCapacityUnits": 1,
                  "WriteCapacityUnits": 1
                },
                "AttributeDefinitions": [
                  {
                    "AttributeName": "taskID",
                    "AttributeType": "S"
                  }
                ],
                "KeySchema": [
                  {
                    "AttributeName": "taskID",
                    "KeyType": "HASH"
                  }
                ]
              }
            }
          },
          "Outputs": {
            "ServerlessDeploymentBucketName": {
              "Value": "serverless-framework-deployments-ca-central-1-0a9780f3-7202",
              "Export": {
                "Name": "sls-task-list-app-dev-ServerlessDeploymentBucketName"
              }
            },
            "GetTasksLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "GetTasksLambdaVersionq82nft5HZoBlBjpylG2AYtqSacr4Slsz2SpjfwoszQ"
              },
              "Export": {
                "Name": "sls-task-list-app-dev-GetTasksLambdaFunctionQualifiedArn"
              }
            },
            "CreateTaskLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "CreateTaskLambdaVersion7X4cXuRuicrteaoSPkW243t2ANW1NNENVgAb6TDzbzs"
              },
              "Export": {
                "Name": "sls-task-list-app-dev-CreateTaskLambdaFunctionQualifiedArn"
              }
            },
            "UpdateTaskByIdLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "UpdateTaskByIdLambdaVersionXInGEBTB1M4hSfe7yRfVlPX2DZgNtfzPi3glRok"
              },
              "Export": {
                "Name": "sls-task-list-app-dev-UpdateTaskByIdLambdaFunctionQualifiedArn"
              }
            },
            "DeleteTaskByIdLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "DeleteTaskByIdLambdaVersiondIxvDb08o65PqlpZsJJV50u4o5Z9nrBWX9zXKvkIY"
              },
              "Export": {
                "Name": "sls-task-list-app-dev-DeleteTaskByIdLambdaFunctionQualifiedArn"
              }
            },
            "ServiceEndpoint": {
              "Description": "URL of the service endpoint",
              "Value": {
                "Fn::Join": [
                  "",
                  [
                    "https://",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    ".execute-api.",
                    {
                      "Ref": "AWS::Region"
                    },
                    ".",
                    {
                      "Ref": "AWS::URLSuffix"
                    },
                    "/dev"
                  ]
                ]
              },
              "Export": {
                "Name": "sls-task-list-app-dev-ServiceEndpoint"
              }
            }
          }
        },
        "vpc": {}
      },
      "functions": {
        "getTasks": {
          "handler": "handlers/handler.getTasks",
          "description": "get all tasks from db",
          "events": [
            {
              "http": {
                "path": "tasks",
                "method": "get",
                "integration": "AWS_PROXY"
              }
            }
          ],
          "name": "task-list-app-dev-getTasks",
          "environment": {
            "NODE_OPTIONS": "--enable-source-maps"
          },
          "package": {},
          "memory": 1024,
          "timeout": 6,
          "runtime": "nodejs22.x",
          "vpc": {},
          "versionLogicalId": "GetTasksLambdaVersionq82nft5HZoBlBjpylG2AYtqSacr4Slsz2SpjfwoszQ"
        },
        "createTask": {
          "handler": "handlers/handler.createTask",
          "description": "create a task into db",
          "events": [
            {
              "http": {
                "path": "tasks",
                "method": "post",
                "integration": "AWS_PROXY"
              }
            }
          ],
          "name": "task-list-app-dev-createTask",
          "environment": {
            "NODE_OPTIONS": "--enable-source-maps"
          },
          "package": {},
          "memory": 1024,
          "timeout": 6,
          "runtime": "nodejs22.x",
          "vpc": {},
          "versionLogicalId": "CreateTaskLambdaVersion7X4cXuRuicrteaoSPkW243t2ANW1NNENVgAb6TDzbzs"
        },
        "updateTaskById": {
          "handler": "handlers/handler.updateTaskById",
          "description": "update a task by id",
          "events": [
            {
              "http": {
                "path": "tasks/{taskId}",
                "method": "put",
                "integration": "AWS_PROXY"
              }
            }
          ],
          "name": "task-list-app-dev-updateTaskById",
          "environment": {
            "NODE_OPTIONS": "--enable-source-maps"
          },
          "package": {},
          "memory": 1024,
          "timeout": 6,
          "runtime": "nodejs22.x",
          "vpc": {},
          "versionLogicalId": "UpdateTaskByIdLambdaVersionXInGEBTB1M4hSfe7yRfVlPX2DZgNtfzPi3glRok"
        },
        "deleteTaskById": {
          "handler": "handlers/handler.deleteTaskById",
          "description": "delete a task in db by id",
          "events": [
            {
              "http": {
                "path": "tasks/{taskId}",
                "method": "delete",
                "integration": "AWS_PROXY"
              }
            }
          ],
          "name": "task-list-app-dev-deleteTaskById",
          "environment": {
            "NODE_OPTIONS": "--enable-source-maps"
          },
          "package": {},
          "memory": 1024,
          "timeout": 6,
          "runtime": "nodejs22.x",
          "vpc": {},
          "versionLogicalId": "DeleteTaskByIdLambdaVersiondIxvDb08o65PqlpZsJJV50u4o5Z9nrBWX9zXKvkIY"
        }
      },
      "resources": {
        "Resources": {
          "TasksTable": {
            "Type": "AWS::DynamoDB::Table",
            "Properties": {
              "TableName": "TasksTable",
              "ProvisionedThroughput": {
                "ReadCapacityUnits": 1,
                "WriteCapacityUnits": 1
              },
              "AttributeDefinitions": [
                {
                  "AttributeName": "taskID",
                  "AttributeType": "S"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "taskID",
                  "KeyType": "HASH"
                }
              ]
            }
          }
        },
        "Outputs": {}
      }
    },
    "provider": {
      "name": "aws",
      "runtime": "nodejs22.x",
      "region": "ca-central-1",
      "iam": {
        "role": {
          "statements": [
            {
              "Effect": "Allow",
              "Action": [
                "dynamodb:PutItem",
                "dynamodb:GetItem",
                "dynamodb:DeleteItem",
                "dynamodb:Scan"
              ],
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "TasksTable",
                    "Arn"
                  ]
                }
              ]
            }
          ]
        }
      },
      "stage": "dev",
      "versionFunctions": true,
      "compiledCloudFormationTemplate": {
        "AWSTemplateFormatVersion": "2010-09-09",
        "Description": "The AWS CloudFormation template for this Serverless application",
        "Resources": {
          "GetTasksLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/task-list-app-dev-getTasks"
            }
          },
          "CreateTaskLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/task-list-app-dev-createTask"
            }
          },
          "UpdateTaskByIdLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/task-list-app-dev-updateTaskById"
            }
          },
          "DeleteTaskByIdLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/task-list-app-dev-deleteTaskById"
            }
          },
          "IamRoleLambdaExecution": {
            "Type": "AWS::IAM::Role",
            "Properties": {
              "AssumeRolePolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Principal": {
                      "Service": [
                        "lambda.amazonaws.com"
                      ]
                    },
                    "Action": [
                      "sts:AssumeRole"
                    ]
                  }
                ]
              },
              "Policies": [
                {
                  "PolicyName": {
                    "Fn::Join": [
                      "-",
                      [
                        "task-list-app",
                        "dev",
                        "lambda"
                      ]
                    ]
                  },
                  "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:CreateLogStream",
                          "logs:CreateLogGroup",
                          "logs:TagResource"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/task-list-app-dev*:*"
                          }
                        ]
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:PutLogEvents"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/task-list-app-dev*:*:*"
                          }
                        ]
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                          "dynamodb:PutItem",
                          "dynamodb:GetItem",
                          "dynamodb:DeleteItem",
                          "dynamodb:Scan"
                        ],
                        "Resource": [
                          {
                            "Fn::GetAtt": [
                              "TasksTable",
                              "Arn"
                            ]
                          }
                        ]
                      }
                    ]
                  }
                }
              ],
              "Path": "/",
              "RoleName": {
                "Fn::Join": [
                  "-",
                  [
                    "task-list-app",
                    "dev",
                    {
                      "Ref": "AWS::Region"
                    },
                    "lambdaRole"
                  ]
                ]
              }
            }
          },
          "GetTasksLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-ca-central-1-0a9780f3-7202",
                "S3Key": "serverless/task-list-app/dev/1746902859993-2025-05-10T18:47:39.993Z/task-list-app.zip"
              },
              "Handler": "handlers/handler.getTasks",
              "Runtime": "nodejs22.x",
              "FunctionName": "task-list-app-dev-getTasks",
              "MemorySize": 1024,
              "Timeout": 6,
              "Description": "get all tasks from db",
              "Environment": {
                "Variables": {
                  "NODE_OPTIONS": "--enable-source-maps"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "GetTasksLogGroup"
            ]
          },
          "CreateTaskLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-ca-central-1-0a9780f3-7202",
                "S3Key": "serverless/task-list-app/dev/1746902859993-2025-05-10T18:47:39.993Z/task-list-app.zip"
              },
              "Handler": "handlers/handler.createTask",
              "Runtime": "nodejs22.x",
              "FunctionName": "task-list-app-dev-createTask",
              "MemorySize": 1024,
              "Timeout": 6,
              "Description": "create a task into db",
              "Environment": {
                "Variables": {
                  "NODE_OPTIONS": "--enable-source-maps"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "CreateTaskLogGroup"
            ]
          },
          "UpdateTaskByIdLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-ca-central-1-0a9780f3-7202",
                "S3Key": "serverless/task-list-app/dev/1746902859993-2025-05-10T18:47:39.993Z/task-list-app.zip"
              },
              "Handler": "handlers/handler.updateTaskById",
              "Runtime": "nodejs22.x",
              "FunctionName": "task-list-app-dev-updateTaskById",
              "MemorySize": 1024,
              "Timeout": 6,
              "Description": "update a task by id",
              "Environment": {
                "Variables": {
                  "NODE_OPTIONS": "--enable-source-maps"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "UpdateTaskByIdLogGroup"
            ]
          },
          "DeleteTaskByIdLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-ca-central-1-0a9780f3-7202",
                "S3Key": "serverless/task-list-app/dev/1746902859993-2025-05-10T18:47:39.993Z/task-list-app.zip"
              },
              "Handler": "handlers/handler.deleteTaskById",
              "Runtime": "nodejs22.x",
              "FunctionName": "task-list-app-dev-deleteTaskById",
              "MemorySize": 1024,
              "Timeout": 6,
              "Description": "delete a task in db by id",
              "Environment": {
                "Variables": {
                  "NODE_OPTIONS": "--enable-source-maps"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "DeleteTaskByIdLogGroup"
            ]
          },
          "GetTasksLambdaVersionq82nft5HZoBlBjpylG2AYtqSacr4Slsz2SpjfwoszQ": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetTasksLambdaFunction"
              },
              "CodeSha256": "WyYy48fSO4hu9gfV4xYpj5QFRy0pyK7qAeuKP2SQmhE=",
              "Description": "get all tasks from db"
            }
          },
          "CreateTaskLambdaVersion7X4cXuRuicrteaoSPkW243t2ANW1NNENVgAb6TDzbzs": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "CreateTaskLambdaFunction"
              },
              "CodeSha256": "WyYy48fSO4hu9gfV4xYpj5QFRy0pyK7qAeuKP2SQmhE=",
              "Description": "create a task into db"
            }
          },
          "UpdateTaskByIdLambdaVersionXInGEBTB1M4hSfe7yRfVlPX2DZgNtfzPi3glRok": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "UpdateTaskByIdLambdaFunction"
              },
              "CodeSha256": "WyYy48fSO4hu9gfV4xYpj5QFRy0pyK7qAeuKP2SQmhE=",
              "Description": "update a task by id"
            }
          },
          "DeleteTaskByIdLambdaVersiondIxvDb08o65PqlpZsJJV50u4o5Z9nrBWX9zXKvkIY": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "DeleteTaskByIdLambdaFunction"
              },
              "CodeSha256": "WyYy48fSO4hu9gfV4xYpj5QFRy0pyK7qAeuKP2SQmhE=",
              "Description": "delete a task in db by id"
            }
          },
          "ApiGatewayRestApi": {
            "Type": "AWS::ApiGateway::RestApi",
            "Properties": {
              "Name": "dev-task-list-app",
              "EndpointConfiguration": {
                "Types": [
                  "EDGE"
                ]
              },
              "Policy": ""
            }
          },
          "ApiGatewayResourceTasks": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "tasks",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceTasksTaskidVar": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceTasks"
              },
              "PathPart": "{taskId}",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodTasksGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceTasks"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": "<REDACTED>",
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "GetTasksLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "GetTasksLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodTasksPost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceTasks"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": "<REDACTED>",
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "CreateTaskLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "CreateTaskLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodTasksTaskidVarPut": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "PUT",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceTasksTaskidVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": "<REDACTED>",
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "UpdateTaskByIdLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "UpdateTaskByIdLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodTasksTaskidVarDelete": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "DELETE",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceTasksTaskidVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": "<REDACTED>",
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "DeleteTaskByIdLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "DeleteTaskByIdLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayDeployment1746902854487": {
            "Type": "AWS::ApiGateway::Deployment",
            "Properties": {
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "StageName": "dev"
            },
            "DependsOn": [
              "ApiGatewayMethodTasksGet",
              "ApiGatewayMethodTasksPost",
              "ApiGatewayMethodTasksTaskidVarPut",
              "ApiGatewayMethodTasksTaskidVarDelete"
            ]
          },
          "GetTasksLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetTasksLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "CreateTaskLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "CreateTaskLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "UpdateTaskByIdLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "UpdateTaskByIdLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "DeleteTaskByIdLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "DeleteTaskByIdLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "TasksTable": {
            "Type": "AWS::DynamoDB::Table",
            "Properties": {
              "TableName": "TasksTable",
              "ProvisionedThroughput": {
                "ReadCapacityUnits": 1,
                "WriteCapacityUnits": 1
              },
              "AttributeDefinitions": [
                {
                  "AttributeName": "taskID",
                  "AttributeType": "S"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "taskID",
                  "KeyType": "HASH"
                }
              ]
            }
          }
        },
        "Outputs": {
          "ServerlessDeploymentBucketName": {
            "Value": "serverless-framework-deployments-ca-central-1-0a9780f3-7202",
            "Export": {
              "Name": "sls-task-list-app-dev-ServerlessDeploymentBucketName"
            }
          },
          "GetTasksLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetTasksLambdaVersionq82nft5HZoBlBjpylG2AYtqSacr4Slsz2SpjfwoszQ"
            },
            "Export": {
              "Name": "sls-task-list-app-dev-GetTasksLambdaFunctionQualifiedArn"
            }
          },
          "CreateTaskLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "CreateTaskLambdaVersion7X4cXuRuicrteaoSPkW243t2ANW1NNENVgAb6TDzbzs"
            },
            "Export": {
              "Name": "sls-task-list-app-dev-CreateTaskLambdaFunctionQualifiedArn"
            }
          },
          "UpdateTaskByIdLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "UpdateTaskByIdLambdaVersionXInGEBTB1M4hSfe7yRfVlPX2DZgNtfzPi3glRok"
            },
            "Export": {
              "Name": "sls-task-list-app-dev-UpdateTaskByIdLambdaFunctionQualifiedArn"
            }
          },
          "DeleteTaskByIdLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "DeleteTaskByIdLambdaVersiondIxvDb08o65PqlpZsJJV50u4o5Z9nrBWX9zXKvkIY"
            },
            "Export": {
              "Name": "sls-task-list-app-dev-DeleteTaskByIdLambdaFunctionQualifiedArn"
            }
          },
          "ServiceEndpoint": {
            "Description": "URL of the service endpoint",
            "Value": {
              "Fn::Join": [
                "",
                [
                  "https://",
                  {
                    "Ref": "ApiGatewayRestApi"
                  },
                  ".execute-api.",
                  {
                    "Ref": "AWS::Region"
                  },
                  ".",
                  {
                    "Ref": "AWS::URLSuffix"
                  },
                  "/dev"
                ]
              ]
            },
            "Export": {
              "Name": "sls-task-list-app-dev-ServiceEndpoint"
            }
          }
        }
      },
      "vpc": {}
    },
    "dashboard": {
      "isEnabledForService": false,
      "requiredAuthentication": false,
      "orgFeaturesInUse": null,
      "orgObservabilityIntegrations": null,
      "serviceAppId": null,
      "serviceProvider": null,
      "instanceParameters": null
    },
    "error": {
      "message": "Stack:arn:aws:cloudformation:ca-central-1:047719660565:stack/task-list-app-dev/939439a0-2951-11f0-adc7-06506b342943 is in UPDATE_ROLLBACK_COMPLETE_CLEANUP_IN_PROGRESS state and can not be updated.",
      "stack": "ServerlessError2: Stack:arn:aws:cloudformation:ca-central-1:047719660565:stack/task-list-app-dev/939439a0-2951-11f0-adc7-06506b342943 is in UPDATE_ROLLBACK_COMPLETE_CLEANUP_IN_PROGRESS state and can not be updated.\n    at file:///Users/ferin/.serverless/releases/4.14.3/package/dist/sf-core.js:1019:36\n    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at async persistentRequest (file:///Users/ferin/.serverless/releases/4.14.3/package/dist/sf-core.js:1018:1959)",
      "code": "AWS_CLOUD_FORMATION_UPDATE_STACK_VALIDATION_ERROR"
    },
    "serviceRawFile": "# \"org\" ensures this Service is used with the correct Serverless Framework Access Key.\norg: ferin\nservice: task-list-app\n\nprovider:\n  name: aws\n  runtime: nodejs22.x\n  region: ca-central-1\n\n  iam:\n    role:\n      statements:\n        - Effect: Allow\n          Action:\n            - \"dynamodb:PutItem\"\n            - \"dynamodb:GetItem\"\n            - \"dynamodb:DeleteItem\"\n            - \"dynamodb:Scan\"\n          Resource:\n            - { \"Fn::GetAtt\": [\"TasksTable\", \"Arn\"] }\n\nfunctions:\n  # GET (All)\n  getTasks:\n    handler: handlers/handler.getTasks\n    description: get all tasks from db\n    events:\n      - http:\n          path: /tasks\n          method: get\n\n  # # GET (One)\n  # getTask:\n  #   handler: handlers/handler.getTaskById\n  #   description: get all tasks from db\n  #   events:\n  #     - http:\n  #         path: /tasks/{id}\n  #         method: get\n\n  # POST\n  createTask:\n    handler: handlers/handler.createTask\n    description: create a task into db\n    events:\n      - http:\n          path: /tasks\n          method: post\n\n  #  PUT\n  updateTaskById:\n    handler: handlers/handler.updateTaskById\n    description: update a task by id\n    events:\n      - http:\n          path: /tasks/{taskId}\n          method: put\n\n  # DELETE\n  deleteTaskById:\n    handler: handlers/handler.deleteTaskById\n    description: delete a task in db by id\n    events:\n      - http:\n          path: /tasks/{taskId}\n          method: delete\n\nresources:\n  Resources:\n    TasksTable:\n      Type: AWS::DynamoDB::Table\n      Properties:\n        TableName: TasksTable\n        ProvisionedThroughput:\n          ReadCapacityUnits: 1\n          WriteCapacityUnits: 1\n        AttributeDefinitions:\n          - AttributeName: taskID\n            AttributeType: S\n        KeySchema:\n          - AttributeName: taskID\n            KeyType: HASH\n",
    "command": [
      "deploy"
    ],
    "options": {},
    "orgId": "a31e8ee6-cf43-4d2a-a16f-556d473f72d5",
    "orgName": "ferin",
    "userId": "9Czc17FXy7LF45PMCd",
    "userName": "ferin",
    "serviceProviderAwsAccountId": "047719660565",
    "serviceProviderAwsCfStackName": "task-list-app-dev",
    "serviceProviderAwsCfStackId": "arn:aws:cloudformation:ca-central-1:047719660565:stack/task-list-app-dev/939439a0-2951-11f0-adc7-06506b342943",
    "serviceProviderAwsCfStackCreated": "2025-05-05T01:37:59.511Z",
    "serviceProviderAwsCfStackUpdated": "2025-05-10T18:46:31.552Z",
    "serviceProviderAwsCfStackStatus": "UPDATE_ROLLBACK_COMPLETE_CLEANUP_IN_PROGRESS",
    "serviceProviderAwsCfStackOutputs": [
      {
        "OutputKey": "GetTasksLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:ca-central-1:047719660565:function:task-list-app-dev-getTasks:8",
        "Description": "Current Lambda function version",
        "ExportName": "sls-task-list-app-dev-GetTasksLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "DeleteTaskByIdLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:ca-central-1:047719660565:function:task-list-app-dev-deleteTaskById:3",
        "Description": "Current Lambda function version",
        "ExportName": "sls-task-list-app-dev-DeleteTaskByIdLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "CreateTaskLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:ca-central-1:047719660565:function:task-list-app-dev-createTask:3",
        "Description": "Current Lambda function version",
        "ExportName": "sls-task-list-app-dev-CreateTaskLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "UpdateTaskByIdLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:ca-central-1:047719660565:function:task-list-app-dev-updateTaskById:3",
        "Description": "Current Lambda function version",
        "ExportName": "sls-task-list-app-dev-UpdateTaskByIdLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "ServiceEndpoint",
        "OutputValue": "https://ddcz72m392.execute-api.ca-central-1.amazonaws.com/dev",
        "Description": "URL of the service endpoint",
        "ExportName": "sls-task-list-app-dev-ServiceEndpoint"
      },
      {
        "OutputKey": "ServerlessDeploymentBucketName",
        "OutputValue": "serverless-framework-deployments-ca-central-1-0a9780f3-7202",
        "ExportName": "sls-task-list-app-dev-ServerlessDeploymentBucketName"
      }
    ]
  }
}